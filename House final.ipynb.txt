{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 164,
   "id": "9df3017a",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "import numpy as np\n",
    "from sklearn.linear_model import LinearRegression\n",
    "from sklearn.preprocessing import OneHotEncoder,StandardScaler\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.compose import make_column_transformer\n",
    "from sklearn.pipeline import make_pipeline\n",
    "from sklearn.metrics import r2_score\n",
    "import matplotlib \n",
    "matplotlib.rcParams[\"figure.figsize\"] = (20,10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 165,
   "id": "5b286bb5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>location</th>\n",
       "      <th>size</th>\n",
       "      <th>total_sqft</th>\n",
       "      <th>bath</th>\n",
       "      <th>district</th>\n",
       "      <th>Price</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Jawahar Nagar</td>\n",
       "      <td>4 BHK</td>\n",
       "      <td>2700</td>\n",
       "      <td>5</td>\n",
       "      <td>Trivandrum</td>\n",
       "      <td>40000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Vanchiyoor</td>\n",
       "      <td>5 BHK</td>\n",
       "      <td>3500</td>\n",
       "      <td>5</td>\n",
       "      <td>Trivandrum</td>\n",
       "      <td>27500000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Vanchiyoor</td>\n",
       "      <td>5 BHK</td>\n",
       "      <td>3700</td>\n",
       "      <td>5</td>\n",
       "      <td>Trivandrum</td>\n",
       "      <td>27500000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Kowdiar</td>\n",
       "      <td>3 BHK</td>\n",
       "      <td>1650</td>\n",
       "      <td>4</td>\n",
       "      <td>Trivandrum</td>\n",
       "      <td>8000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Pattom</td>\n",
       "      <td>4 BHK</td>\n",
       "      <td>3800</td>\n",
       "      <td>4</td>\n",
       "      <td>Trivandrum</td>\n",
       "      <td>32500000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        location    size  total_sqft  bath    district     Price\n",
       "0  Jawahar Nagar  4 BHK         2700     5  Trivandrum  40000000\n",
       "1     Vanchiyoor  5 BHK         3500     5  Trivandrum  27500000\n",
       "2     Vanchiyoor  5 BHK         3700     5  Trivandrum  27500000\n",
       "3        Kowdiar  3 BHK         1650     4  Trivandrum   8000000\n",
       "4         Pattom  4 BHK         3800     4  Trivandrum  32500000"
      ]
     },
     "execution_count": 165,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pd.read_csv('Kerala_house_Shylesh_tvm.csv')\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 166,
   "id": "a12ae79c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>location</th>\n",
       "      <th>size</th>\n",
       "      <th>total_sqft</th>\n",
       "      <th>bath</th>\n",
       "      <th>district</th>\n",
       "      <th>Price</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1192</th>\n",
       "      <td>Thirumala</td>\n",
       "      <td>5 BHK</td>\n",
       "      <td>2800</td>\n",
       "      <td>5</td>\n",
       "      <td>Trivandrum</td>\n",
       "      <td>14500000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1193</th>\n",
       "      <td>Thirumala</td>\n",
       "      <td>4 BHK</td>\n",
       "      <td>2100</td>\n",
       "      <td>4</td>\n",
       "      <td>Trivandrum</td>\n",
       "      <td>8500000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1194</th>\n",
       "      <td>Vayalilkkada</td>\n",
       "      <td>4 BHK</td>\n",
       "      <td>3300</td>\n",
       "      <td>5</td>\n",
       "      <td>Trivandrum</td>\n",
       "      <td>24500000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1195</th>\n",
       "      <td>Kariavattom</td>\n",
       "      <td>5 BHK</td>\n",
       "      <td>3795</td>\n",
       "      <td>5</td>\n",
       "      <td>Trivandrum</td>\n",
       "      <td>21000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1196</th>\n",
       "      <td>Kazhakoottam</td>\n",
       "      <td>3 BHK</td>\n",
       "      <td>1500</td>\n",
       "      <td>3</td>\n",
       "      <td>Trivandrum</td>\n",
       "      <td>6900000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          location    size  total_sqft  bath    district     Price\n",
       "1192     Thirumala  5 BHK         2800     5  Trivandrum  14500000\n",
       "1193     Thirumala  4 BHK         2100     4  Trivandrum   8500000\n",
       "1194  Vayalilkkada  4 BHK         3300     5  Trivandrum  24500000\n",
       "1195   Kariavattom  5 BHK         3795     5  Trivandrum  21000000\n",
       "1196  Kazhakoottam  3 BHK         1500     3  Trivandrum   6900000"
      ]
     },
     "execution_count": 166,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.tail()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 167,
   "id": "e999351f",
   "metadata": {},
   "outputs": [],
   "source": [
    "df1=df['location'].value_counts()\n",
    "df1\n",
    "df1.to_csv(\"count1.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 168,
   "id": "001fabad",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "\"df1 = pd.read_csv('Count.csv')\\n# selecting rows based on condition \\nrslt_df = df1[df1['Count'] < 10] \\n    \\nprint('\\nResult dataframe :\\n', rslt_df['location'])\\n\""
      ]
     },
     "execution_count": 168,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "'''df1 = pd.read_csv('Count.csv')\n",
    "# selecting rows based on condition \n",
    "rslt_df = df1[df1['Count'] < 10] \n",
    "    \n",
    "print('\\nResult dataframe :\\n', rslt_df['location'])\n",
    "'''"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6dc321ae",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 169,
   "id": "4d3a4689",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1197, 6)"
      ]
     },
     "execution_count": 169,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 170,
   "id": "69418898",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 1197 entries, 0 to 1196\n",
      "Data columns (total 6 columns):\n",
      " #   Column      Non-Null Count  Dtype \n",
      "---  ------      --------------  ----- \n",
      " 0   location    1197 non-null   object\n",
      " 1   size        1197 non-null   object\n",
      " 2   total_sqft  1197 non-null   int64 \n",
      " 3   bath        1197 non-null   int64 \n",
      " 4   district    1197 non-null   object\n",
      " 5   Price       1197 non-null   int64 \n",
      "dtypes: int64(3), object(3)\n",
      "memory usage: 56.2+ KB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 171,
   "id": "359bc061",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Cleaning "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 172,
   "id": "e93ff9d3",
   "metadata": {},
   "outputs": [],
   "source": [
    "backup=df.copy()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 173,
   "id": "154941e4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "location      0\n",
       "size          0\n",
       "total_sqft    0\n",
       "bath          0\n",
       "district      0\n",
       "Price         0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 173,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 174,
   "id": "3b97053a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 1197 entries, 0 to 1196\n",
      "Data columns (total 6 columns):\n",
      " #   Column      Non-Null Count  Dtype \n",
      "---  ------      --------------  ----- \n",
      " 0   location    1197 non-null   object\n",
      " 1   size        1197 non-null   object\n",
      " 2   total_sqft  1197 non-null   int64 \n",
      " 3   bath        1197 non-null   int64 \n",
      " 4   district    1197 non-null   object\n",
      " 5   Price       1197 non-null   int64 \n",
      "dtypes: int64(3), object(3)\n",
      "memory usage: 56.2+ KB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 175,
   "id": "1d46ccb4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Kowdiar            91\n",
      "Pattom             86\n",
      "Thirumala          82\n",
      "Kesavadasapuram    45\n",
      "Karamana           34\n",
      "                   ..\n",
      "Sasthamangalam      1\n",
      "Attingal            1\n",
      "Ptp nagar           1\n",
      "Mukkola             1\n",
      "Kudappanakunnu      1\n",
      "Name: location, Length: 165, dtype: int64\n",
      "4 BHK     351\n",
      "3 BHK     295\n",
      "5 BHK     182\n",
      "2 BHK     119\n",
      "3 BHK     108\n",
      "4 BHK      75\n",
      "2 BHK      23\n",
      "5 BHK      23\n",
      "1 BHK      10\n",
      "6 BHK       5\n",
      "7 BHK       3\n",
      "8 BHK       2\n",
      "1 BHK       1\n",
      "Name: size, dtype: int64\n",
      "2000    62\n",
      "2500    58\n",
      "3500    53\n",
      "1500    52\n",
      "1800    51\n",
      "        ..\n",
      "4635     1\n",
      "6120     1\n",
      "3438     1\n",
      "5946     1\n",
      "1050     1\n",
      "Name: total_sqft, Length: 215, dtype: int64\n",
      "3    391\n",
      "4    354\n",
      "5    216\n",
      "2    148\n",
      "1     54\n",
      "0     27\n",
      "6      5\n",
      "7      1\n",
      "8      1\n",
      "Name: bath, dtype: int64\n",
      "Trivandrum    1197\n",
      "Name: district, dtype: int64\n",
      "7500000    48\n",
      "7000000    46\n",
      "9500000    41\n",
      "8500000    38\n",
      "6500000    29\n",
      "           ..\n",
      "450000      1\n",
      "4430000     1\n",
      "6350000     1\n",
      "4350000     1\n",
      "8400000     1\n",
      "Name: Price, Length: 161, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "for column in df.columns:\n",
    "     print(df[column].value_counts())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 176,
   "id": "1e8f092e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>total_sqft</th>\n",
       "      <th>bath</th>\n",
       "      <th>Price</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>1197.000000</td>\n",
       "      <td>1197.000000</td>\n",
       "      <td>1.197000e+03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>2523.011696</td>\n",
       "      <td>3.395155</td>\n",
       "      <td>1.310208e+07</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>2163.581452</td>\n",
       "      <td>1.200645</td>\n",
       "      <td>2.283695e+07</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.400000e+05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>1500.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>6.000000e+06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>2000.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>8.300000e+06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>3000.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>1.500000e+07</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>35000.000000</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>4.430000e+08</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         total_sqft         bath         Price\n",
       "count   1197.000000  1197.000000  1.197000e+03\n",
       "mean    2523.011696     3.395155  1.310208e+07\n",
       "std     2163.581452     1.200645  2.283695e+07\n",
       "min        0.000000     0.000000  1.400000e+05\n",
       "25%     1500.000000     3.000000  6.000000e+06\n",
       "50%     2000.000000     3.000000  8.300000e+06\n",
       "75%     3000.000000     4.000000  1.500000e+07\n",
       "max    35000.000000     8.000000  4.430000e+08"
      ]
     },
     "execution_count": 176,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 177,
   "id": "8e0c96b3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:>"
      ]
     },
     "execution_count": 177,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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AAAAAAAAxRBGAAAAAACAYggjAAAAAABAMYQRAAAAAACgGMIIAAAAAABQjD6FkcWLF+d973tfhg4dmlGjRuVjH/tYfvjDH/Zac/HFF6dSqfTa3v/+9/da09PTk7lz52bkyJEZMmRIZs6cmW3btr32swEAAAAAAHgZfQoja9asyRVXXJH169dn1apV+fnPf57p06fnueee67XuIx/5SLZv317bvvnNb/Y6Pm/evKxcuTIrVqzI2rVrs3v37px77rnZv3//az8jAAAAAACAQ2joy+IHH3yw1+s777wzo0aNyqZNm/LhD3+4tr+xsTEtLS0H/Yyurq7ccccdueeeezJ16tQkyb333pu2trasXr06Z599dl/PAQAAAAAA4Ffymp4x0tXVlSQZPnx4r/2PPvpoRo0alZNOOimXXHJJduzYUTu2adOm7Nu3L9OnT6/ta21tTXt7e9atW3fQ7+np6Ul3d3evDQAAAAAAoK9edRipVquZP39+PvjBD6a9vb22f8aMGbnvvvvyyCOP5Oabb86GDRty1llnpaenJ0nS2dmZAQMG5Ljjjuv1ec3Nzens7Dzody1evDhNTU21ra2t7dWODQAAAAAAFKxPP6X1y6688sr88z//c9auXdtr/wUXXFD76/b29kycODFjxozJAw88kFmzZh3y86rVaiqVykGPLVy4MPPnz6+97u7uFkcAAAAAAIA+e1V3jMydOzdf//rX8+1vfzvHH3/8y64dPXp0xowZkyeeeCJJ0tLSkr1792bnzp291u3YsSPNzc0H/YzGxsYMGzas1wYAAAAAANBXfQoj1Wo1V155Zf7mb/4mjzzySMaOHfuK73nmmWeydevWjB49OkkyYcKE9O/fP6tWraqt2b59e7Zs2ZJJkyb1cXwAAAAAAIBfXZ9+SuuKK67I/fffn6997WsZOnRo7ZkgTU1NGTRoUHbv3p2Ojo58/OMfz+jRo/PUU0/lmmuuyciRI3P++efX1s6ZMydXXXVVRowYkeHDh2fBggUZP358pk6devjPEAAAAAAA4P/pUxhZtmxZkmTy5Mm99t955525+OKL069fv2zevDl33313nn322YwePTpnnnlmvvrVr2bo0KG19UuWLElDQ0Nmz56dPXv2ZMqUKbnrrrvSr1+/135GAAAAAAAAh9CnMFKtVl/2+KBBg/LQQw+94ucMHDgwS5cuzdKl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",
      "text/plain": [
       "<Figure size 2000x1000 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "df.bath.value_counts().plot(kind='bar')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 178,
   "id": "623f068f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Kowdiar            91\n",
       "Pattom             86\n",
       "Thirumala          82\n",
       "Kesavadasapuram    45\n",
       "Karamana           34\n",
       "                   ..\n",
       "Sasthamangalam      1\n",
       "Attingal            1\n",
       "Ptp nagar           1\n",
       "Mukkola             1\n",
       "Kudappanakunnu      1\n",
       "Name: location, Length: 165, dtype: int64"
      ]
     },
     "execution_count": 178,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['location'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 179,
   "id": "7e3748ef",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "4 BHK     351\n",
       "3 BHK     295\n",
       "5 BHK     182\n",
       "2 BHK     119\n",
       "3 BHK     108\n",
       "4 BHK      75\n",
       "2 BHK      23\n",
       "5 BHK      23\n",
       "1 BHK      10\n",
       "6 BHK       5\n",
       "7 BHK       3\n",
       "8 BHK       2\n",
       "1 BHK       1\n",
       "Name: size, dtype: int64"
      ]
     },
     "execution_count": 179,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['size'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 180,
   "id": "db879428",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 1197 entries, 0 to 1196\n",
      "Data columns (total 6 columns):\n",
      " #   Column      Non-Null Count  Dtype \n",
      "---  ------      --------------  ----- \n",
      " 0   location    1197 non-null   object\n",
      " 1   size        1197 non-null   object\n",
      " 2   total_sqft  1197 non-null   int64 \n",
      " 3   bath        1197 non-null   int64 \n",
      " 4   district    1197 non-null   object\n",
      " 5   Price       1197 non-null   int64 \n",
      "dtypes: int64(3), object(3)\n",
      "memory usage: 56.2+ KB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 181,
   "id": "5961c437",
   "metadata": {},
   "outputs": [],
   "source": [
    "df['Price']=df['Price'].astype(str)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 182,
   "id": "b9489039",
   "metadata": {},
   "outputs": [],
   "source": [
    "df=df[df['Price'].str.isnumeric()]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 183,
   "id": "266dcc7e",
   "metadata": {},
   "outputs": [],
   "source": [
    "df['Price']=df['Price'].str.replace(',','').astype(float)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 184,
   "id": "69a6b05f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 1197 entries, 0 to 1196\n",
      "Data columns (total 6 columns):\n",
      " #   Column      Non-Null Count  Dtype  \n",
      "---  ------      --------------  -----  \n",
      " 0   location    1197 non-null   object \n",
      " 1   size        1197 non-null   object \n",
      " 2   total_sqft  1197 non-null   int64  \n",
      " 3   bath        1197 non-null   int64  \n",
      " 4   district    1197 non-null   object \n",
      " 5   Price       1197 non-null   float64\n",
      "dtypes: float64(1), int64(2), object(3)\n",
      "memory usage: 65.5+ KB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 185,
   "id": "ec7324fd",
   "metadata": {},
   "outputs": [],
   "source": [
    "df['bhk']=df['size'].str.split().str.get(0).astype(int)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 186,
   "id": "0460f1df",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>total_sqft</th>\n",
       "      <th>bath</th>\n",
       "      <th>Price</th>\n",
       "      <th>bhk</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>1197.000000</td>\n",
       "      <td>1197.000000</td>\n",
       "      <td>1.197000e+03</td>\n",
       "      <td>1197.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>2523.011696</td>\n",
       "      <td>3.395155</td>\n",
       "      <td>1.310208e+07</td>\n",
       "      <td>3.592314</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>2163.581452</td>\n",
       "      <td>1.200645</td>\n",
       "      <td>2.283695e+07</td>\n",
       "      <td>0.982731</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.400000e+05</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>1500.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>6.000000e+06</td>\n",
       "      <td>3.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>2000.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>8.300000e+06</td>\n",
       "      <td>4.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>3000.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>1.500000e+07</td>\n",
       "      <td>4.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>35000.000000</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>4.430000e+08</td>\n",
       "      <td>8.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         total_sqft         bath         Price          bhk\n",
       "count   1197.000000  1197.000000  1.197000e+03  1197.000000\n",
       "mean    2523.011696     3.395155  1.310208e+07     3.592314\n",
       "std     2163.581452     1.200645  2.283695e+07     0.982731\n",
       "min        0.000000     0.000000  1.400000e+05     1.000000\n",
       "25%     1500.000000     3.000000  6.000000e+06     3.000000\n",
       "50%     2000.000000     3.000000  8.300000e+06     4.000000\n",
       "75%     3000.000000     4.000000  1.500000e+07     4.000000\n",
       "max    35000.000000     8.000000  4.430000e+08     8.000000"
      ]
     },
     "execution_count": 186,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 187,
   "id": "0a4060e5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 2000x800 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize = (20,8))\n",
    "ax=sns.countplot(x = 'bhk', data = df)\n",
    "plt.xticks(rotation = 90)\n",
    "for p in ax.patches:\n",
    "    ax.annotate(int(p.get_height()), (p.get_x()+0.25, p.get_height()+1), va = 'bottom', color = 'black')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 188,
   "id": "6bb2e4ad",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>location</th>\n",
       "      <th>size</th>\n",
       "      <th>total_sqft</th>\n",
       "      <th>bath</th>\n",
       "      <th>district</th>\n",
       "      <th>Price</th>\n",
       "      <th>bhk</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Jawahar Nagar</td>\n",
       "      <td>4 BHK</td>\n",
       "      <td>2700</td>\n",
       "      <td>5</td>\n",
       "      <td>Trivandrum</td>\n",
       "      <td>40000000.0</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Vanchiyoor</td>\n",
       "      <td>5 BHK</td>\n",
       "      <td>3500</td>\n",
       "      <td>5</td>\n",
       "      <td>Trivandrum</td>\n",
       "      <td>27500000.0</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Vanchiyoor</td>\n",
       "      <td>5 BHK</td>\n",
       "      <td>3700</td>\n",
       "      <td>5</td>\n",
       "      <td>Trivandrum</td>\n",
       "      <td>27500000.0</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Kowdiar</td>\n",
       "      <td>3 BHK</td>\n",
       "      <td>1650</td>\n",
       "      <td>4</td>\n",
       "      <td>Trivandrum</td>\n",
       "      <td>8000000.0</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Pattom</td>\n",
       "      <td>4 BHK</td>\n",
       "      <td>3800</td>\n",
       "      <td>4</td>\n",
       "      <td>Trivandrum</td>\n",
       "      <td>32500000.0</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1192</th>\n",
       "      <td>Thirumala</td>\n",
       "      <td>5 BHK</td>\n",
       "      <td>2800</td>\n",
       "      <td>5</td>\n",
       "      <td>Trivandrum</td>\n",
       "      <td>14500000.0</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1193</th>\n",
       "      <td>Thirumala</td>\n",
       "      <td>4 BHK</td>\n",
       "      <td>2100</td>\n",
       "      <td>4</td>\n",
       "      <td>Trivandrum</td>\n",
       "      <td>8500000.0</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1194</th>\n",
       "      <td>Vayalilkkada</td>\n",
       "      <td>4 BHK</td>\n",
       "      <td>3300</td>\n",
       "      <td>5</td>\n",
       "      <td>Trivandrum</td>\n",
       "      <td>24500000.0</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1195</th>\n",
       "      <td>Kariavattom</td>\n",
       "      <td>5 BHK</td>\n",
       "      <td>3795</td>\n",
       "      <td>5</td>\n",
       "      <td>Trivandrum</td>\n",
       "      <td>21000000.0</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1196</th>\n",
       "      <td>Kazhakoottam</td>\n",
       "      <td>3 BHK</td>\n",
       "      <td>1500</td>\n",
       "      <td>3</td>\n",
       "      <td>Trivandrum</td>\n",
       "      <td>6900000.0</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1197 rows × 7 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "           location    size  total_sqft  bath    district       Price  bhk\n",
       "0     Jawahar Nagar  4 BHK         2700     5  Trivandrum  40000000.0    4\n",
       "1        Vanchiyoor  5 BHK         3500     5  Trivandrum  27500000.0    5\n",
       "2        Vanchiyoor  5 BHK         3700     5  Trivandrum  27500000.0    5\n",
       "3           Kowdiar  3 BHK         1650     4  Trivandrum   8000000.0    3\n",
       "4            Pattom  4 BHK         3800     4  Trivandrum  32500000.0    4\n",
       "...             ...     ...         ...   ...         ...         ...  ...\n",
       "1192      Thirumala  5 BHK         2800     5  Trivandrum  14500000.0    5\n",
       "1193      Thirumala  4 BHK         2100     4  Trivandrum   8500000.0    4\n",
       "1194   Vayalilkkada  4 BHK         3300     5  Trivandrum  24500000.0    4\n",
       "1195    Kariavattom  5 BHK         3795     5  Trivandrum  21000000.0    5\n",
       "1196   Kazhakoottam  3 BHK         1500     3  Trivandrum   6900000.0    3\n",
       "\n",
       "[1197 rows x 7 columns]"
      ]
     },
     "execution_count": 188,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 189,
   "id": "c3e405a9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Kowdiar            91\n",
       "Pattom             86\n",
       "Thirumala          82\n",
       "Kesavadasapuram    45\n",
       "Karamana           34\n",
       "                   ..\n",
       "Sasthamangalam      1\n",
       "Attingal            1\n",
       "Ptp nagar           1\n",
       "Mukkola             1\n",
       "Kudappanakunnu      1\n",
       "Name: location, Length: 165, dtype: int64"
      ]
     },
     "execution_count": 189,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['location'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 190,
   "id": "9bf84e57",
   "metadata": {},
   "outputs": [],
   "source": [
    "df['location'] = df['location' ].apply(lambda x: x.strip())\n",
    "location_counts = df ['location'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 191,
   "id": "1d9a249b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Kowdiar            91\n",
       "Pattom             86\n",
       "Thirumala          82\n",
       "Kesavadasapuram    45\n",
       "Karamana           34\n",
       "                   ..\n",
       "Attingal            1\n",
       "Ptp nagar           1\n",
       "Muttada             1\n",
       "Punnakulam          1\n",
       "Kudappanakunnu      1\n",
       "Name: location, Length: 163, dtype: int64"
      ]
     },
     "execution_count": 191,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "location_counts"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 192,
   "id": "a8389abe",
   "metadata": {},
   "outputs": [],
   "source": [
    "location_count_less_1 = location_counts[location_counts<=10]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 193,
   "id": "f8fd58a1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "other              438\n",
       "Kowdiar             91\n",
       "Pattom              86\n",
       "Thirumala           82\n",
       "Kesavadasapuram     45\n",
       "Kazhakoottam        34\n",
       "Karamana            34\n",
       "Kumarapuram         34\n",
       "Ulloor              33\n",
       "Manacaud            28\n",
       "Anayara             26\n",
       "Thampanoor          26\n",
       "Akkulam             25\n",
       "Pongumoodu          20\n",
       "Vattiyoorkavu       19\n",
       "Thycaud             19\n",
       "Vazhuthacaud        17\n",
       "Vanchiyoor          17\n",
       "Ambalamukku         17\n",
       "Peroorkada          17\n",
       "Karikkakam          14\n",
       "Sreekaryam          14\n",
       "Pattoor             14\n",
       "Peyad               13\n",
       "Attukal             12\n",
       "Kuravankonam        11\n",
       "Mannanthala         11\n",
       "Name: location, dtype: int64"
      ]
     },
     "execution_count": 193,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['location']=df['location'].apply(lambda x: 'other' if x in location_count_less_1 else x)\n",
    "df['location'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 194,
   "id": "8aca01c7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'count')"
      ]
     },
     "execution_count": 194,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 2000x1000 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "df.bhk.value_counts().plot(kind='bar')\n",
    "plt.xlabel('No of bhk')\n",
    "plt.ylabel('count')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 195,
   "id": "b28c70ee",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>total_sqft</th>\n",
       "      <th>bath</th>\n",
       "      <th>Price</th>\n",
       "      <th>bhk</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>1197.000000</td>\n",
       "      <td>1197.000000</td>\n",
       "      <td>1.197000e+03</td>\n",
       "      <td>1197.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>2523.011696</td>\n",
       "      <td>3.395155</td>\n",
       "      <td>1.310208e+07</td>\n",
       "      <td>3.592314</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>2163.581452</td>\n",
       "      <td>1.200645</td>\n",
       "      <td>2.283695e+07</td>\n",
       "      <td>0.982731</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.400000e+05</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>1500.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>6.000000e+06</td>\n",
       "      <td>3.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>2000.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>8.300000e+06</td>\n",
       "      <td>4.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>3000.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>1.500000e+07</td>\n",
       "      <td>4.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>35000.000000</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>4.430000e+08</td>\n",
       "      <td>8.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         total_sqft         bath         Price          bhk\n",
       "count   1197.000000  1197.000000  1.197000e+03  1197.000000\n",
       "mean    2523.011696     3.395155  1.310208e+07     3.592314\n",
       "std     2163.581452     1.200645  2.283695e+07     0.982731\n",
       "min        0.000000     0.000000  1.400000e+05     1.000000\n",
       "25%     1500.000000     3.000000  6.000000e+06     3.000000\n",
       "50%     2000.000000     3.000000  8.300000e+06     4.000000\n",
       "75%     3000.000000     4.000000  1.500000e+07     4.000000\n",
       "max    35000.000000     8.000000  4.430000e+08     8.000000"
      ]
     },
     "execution_count": 195,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 196,
   "id": "eb3c62ad",
   "metadata": {},
   "outputs": [],
   "source": [
    "df['price_per_sqft']=df['Price']/df['total_sqft']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 197,
   "id": "2f082835",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0       14814.814815\n",
       "1        7857.142857\n",
       "2        7432.432432\n",
       "3        4848.484848\n",
       "4        8552.631579\n",
       "            ...     \n",
       "1192     5178.571429\n",
       "1193     4047.619048\n",
       "1194     7424.242424\n",
       "1195     5533.596838\n",
       "1196     4600.000000\n",
       "Name: price_per_sqft, Length: 1197, dtype: float64"
      ]
     },
     "execution_count": 197,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['price_per_sqft']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 198,
   "id": "c0836799",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>total_sqft</th>\n",
       "      <th>bath</th>\n",
       "      <th>Price</th>\n",
       "      <th>bhk</th>\n",
       "      <th>price_per_sqft</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>1197.000000</td>\n",
       "      <td>1197.000000</td>\n",
       "      <td>1.197000e+03</td>\n",
       "      <td>1197.000000</td>\n",
       "      <td>1197.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>2523.011696</td>\n",
       "      <td>3.395155</td>\n",
       "      <td>1.310208e+07</td>\n",
       "      <td>3.592314</td>\n",
       "      <td>inf</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>2163.581452</td>\n",
       "      <td>1.200645</td>\n",
       "      <td>2.283695e+07</td>\n",
       "      <td>0.982731</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.400000e+05</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>56.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>1500.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>6.000000e+06</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>3454.545455</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>2000.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>8.300000e+06</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>4640.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>3000.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>1.500000e+07</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>6315.789474</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>35000.000000</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>4.430000e+08</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>inf</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         total_sqft         bath         Price          bhk  price_per_sqft\n",
       "count   1197.000000  1197.000000  1.197000e+03  1197.000000     1197.000000\n",
       "mean    2523.011696     3.395155  1.310208e+07     3.592314             inf\n",
       "std     2163.581452     1.200645  2.283695e+07     0.982731             NaN\n",
       "min        0.000000     0.000000  1.400000e+05     1.000000       56.000000\n",
       "25%     1500.000000     3.000000  6.000000e+06     3.000000     3454.545455\n",
       "50%     2000.000000     3.000000  8.300000e+06     4.000000     4640.000000\n",
       "75%     3000.000000     4.000000  1.500000e+07     4.000000     6315.789474\n",
       "max    35000.000000     8.000000  4.430000e+08     8.000000             inf"
      ]
     },
     "execution_count": 198,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 199,
   "id": "97fa438f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>location</th>\n",
       "      <th>size</th>\n",
       "      <th>total_sqft</th>\n",
       "      <th>bath</th>\n",
       "      <th>district</th>\n",
       "      <th>Price</th>\n",
       "      <th>bhk</th>\n",
       "      <th>price_per_sqft</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>other</td>\n",
       "      <td>2 BHK</td>\n",
       "      <td>450</td>\n",
       "      <td>1</td>\n",
       "      <td>Trivandrum</td>\n",
       "      <td>2300000.0</td>\n",
       "      <td>2</td>\n",
       "      <td>5111.111111</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>44</th>\n",
       "      <td>other</td>\n",
       "      <td>4 BHK</td>\n",
       "      <td>750</td>\n",
       "      <td>2</td>\n",
       "      <td>Trivandrum</td>\n",
       "      <td>5000000.0</td>\n",
       "      <td>4</td>\n",
       "      <td>6666.666667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>103</th>\n",
       "      <td>other</td>\n",
       "      <td>3 BHK</td>\n",
       "      <td>750</td>\n",
       "      <td>3</td>\n",
       "      <td>Trivandrum</td>\n",
       "      <td>7000000.0</td>\n",
       "      <td>3</td>\n",
       "      <td>9333.333333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>129</th>\n",
       "      <td>other</td>\n",
       "      <td>5 BHK</td>\n",
       "      <td>1100</td>\n",
       "      <td>5</td>\n",
       "      <td>Trivandrum</td>\n",
       "      <td>16000000.0</td>\n",
       "      <td>5</td>\n",
       "      <td>14545.454545</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>167</th>\n",
       "      <td>other</td>\n",
       "      <td>4 BHK</td>\n",
       "      <td>800</td>\n",
       "      <td>2</td>\n",
       "      <td>Trivandrum</td>\n",
       "      <td>3200000.0</td>\n",
       "      <td>4</td>\n",
       "      <td>4000.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    location    size  total_sqft  bath    district       Price  bhk  \\\n",
       "26     other  2 BHK          450     1  Trivandrum   2300000.0    2   \n",
       "44     other  4 BHK          750     2  Trivandrum   5000000.0    4   \n",
       "103    other  3 BHK          750     3  Trivandrum   7000000.0    3   \n",
       "129    other  5 BHK         1100     5  Trivandrum  16000000.0    5   \n",
       "167    other  4 BHK          800     2  Trivandrum   3200000.0    4   \n",
       "\n",
       "     price_per_sqft  \n",
       "26      5111.111111  \n",
       "44      6666.666667  \n",
       "103     9333.333333  \n",
       "129    14545.454545  \n",
       "167     4000.000000  "
      ]
     },
     "execution_count": 199,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[df.total_sqft/df.bhk<300].head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 200,
   "id": "4aefe463",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1157, 8)"
      ]
     },
     "execution_count": 200,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = df[~(df.total_sqft/df.bhk<300)]\n",
    "df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f476c290",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 201,
   "id": "d22abfe9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(945, 8)"
      ]
     },
     "execution_count": 201,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def remove_pps_outliers(df):\n",
    "    df_out = pd.DataFrame()\n",
    "    for key, subdf in df.groupby('location'):\n",
    "        m = np.mean(subdf.price_per_sqft)\n",
    "        st = np.std(subdf.price_per_sqft)\n",
    "        reduced_df = subdf[(subdf.price_per_sqft>(m-st)) & (subdf.price_per_sqft<=(m+st))]\n",
    "        df_out = pd.concat([df_out,reduced_df],ignore_index=True)\n",
    "    return df_out\n",
    "df = remove_pps_outliers(df)\n",
    "df.shape\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 202,
   "id": "9ddcd28e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 800x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "def plot_scatter_chart(df,location):\n",
    "    bhk2 = df[(df.location==location) & (df.bhk==2)]\n",
    "    bhk3 = df[(df.location==location) & (df.bhk==3)]\n",
    "    matplotlib.rcParams['figure.figsize'] = (8,6)\n",
    "    plt.scatter(bhk2.total_sqft,bhk2.Price,color='blue',label='2 bhk', s=50)\n",
    "    plt.scatter(bhk3.total_sqft,bhk3.Price,marker='+', color='green',label='3 bhk', s=50)\n",
    "    plt.xlabel(\"Total Square Feet Area\")\n",
    "    plt.ylabel(\"Price (Lakh Indian Rupees)\")\n",
    "    plt.title(location)\n",
    "    plt.legend()\n",
    "    \n",
    "plot_scatter_chart(df,\"Kowdiar\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 203,
   "id": "c745055f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(687, 8)"
      ]
     },
     "execution_count": 203,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def remove_bhk_outliers(df):\n",
    "    exclude_indices = np.array([])\n",
    "    for location, location_df in df.groupby('location'):\n",
    "        bhk_stats = {}\n",
    "        for bhk, bhk_df in location_df.groupby('bhk'):\n",
    "            bhk_stats[bhk] = {\n",
    "                'mean': np.mean(bhk_df.price_per_sqft),\n",
    "                'std': np.std(bhk_df.price_per_sqft),\n",
    "                'count': bhk_df.shape[0]\n",
    "            }\n",
    "        for bhk, bhk_df in location_df.groupby('bhk'):\n",
    "            stats = bhk_stats.get(bhk-1)\n",
    "            if stats and stats['count']>5:\n",
    "                exclude_indices = np.append(exclude_indices, bhk_df[bhk_df.price_per_sqft<(stats['mean'])].index.values)\n",
    "    return df.drop(exclude_indices,axis='index')\n",
    "df = remove_bhk_outliers(df)\n",
    "df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 204,
   "id": "cb7d77db",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 800x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot_scatter_chart(df,\"Kowdiar\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 205,
   "id": "714eb4cb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'Count')"
      ]
     },
     "execution_count": 205,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 800x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.hist(df.price_per_sqft,rwidth=0.8)\n",
    "plt.xlabel(\"Price Per Square Feet\")\n",
    "plt.ylabel(\"Count\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 206,
   "id": "cb24b7e7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'Count')"
      ]
     },
     "execution_count": 206,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 800x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.hist(df.bath,rwidth=0.8)\n",
    "plt.xlabel(\"Number of bathrooms\")\n",
    "plt.ylabel(\"Count\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 207,
   "id": "66a2ce94",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count      687.000000\n",
       "mean      5313.998204\n",
       "std       1802.704711\n",
       "min        562.500000\n",
       "25%       4076.704545\n",
       "50%       5000.000000\n",
       "75%       6363.636364\n",
       "max      11666.666667\n",
       "Name: price_per_sqft, dtype: float64"
      ]
     },
     "execution_count": 207,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.price_per_sqft.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 208,
   "id": "a7660346",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:>"
      ]
     },
     "execution_count": 208,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 900x700 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(9,7))\n",
    "columns =['Price','bhk','bath','total_sqft','price_per_sqft','district','location']\n",
    "sns.heatmap(df[columns].corr(),cmap='YlGnBu',annot=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 209,
   "id": "2bca6a12",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(687, 8)"
      ]
     },
     "execution_count": 209,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 210,
   "id": "9a633407",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>location</th>\n",
       "      <th>size</th>\n",
       "      <th>total_sqft</th>\n",
       "      <th>bath</th>\n",
       "      <th>district</th>\n",
       "      <th>Price</th>\n",
       "      <th>bhk</th>\n",
       "      <th>price_per_sqft</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Akkulam</td>\n",
       "      <td>2 BHK</td>\n",
       "      <td>950</td>\n",
       "      <td>2</td>\n",
       "      <td>Trivandrum</td>\n",
       "      <td>3150000.0</td>\n",
       "      <td>2</td>\n",
       "      <td>3315.789474</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Akkulam</td>\n",
       "      <td>3 BHK</td>\n",
       "      <td>1375</td>\n",
       "      <td>3</td>\n",
       "      <td>Trivandrum</td>\n",
       "      <td>6700000.0</td>\n",
       "      <td>3</td>\n",
       "      <td>4872.727273</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Akkulam</td>\n",
       "      <td>4 BHK</td>\n",
       "      <td>1800</td>\n",
       "      <td>4</td>\n",
       "      <td>Trivandrum</td>\n",
       "      <td>7000000.0</td>\n",
       "      <td>4</td>\n",
       "      <td>3888.888889</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Akkulam</td>\n",
       "      <td>4 BHK</td>\n",
       "      <td>1750</td>\n",
       "      <td>4</td>\n",
       "      <td>Trivandrum</td>\n",
       "      <td>6300000.0</td>\n",
       "      <td>4</td>\n",
       "      <td>3600.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Akkulam</td>\n",
       "      <td>5 BHK</td>\n",
       "      <td>1960</td>\n",
       "      <td>5</td>\n",
       "      <td>Trivandrum</td>\n",
       "      <td>7900000.0</td>\n",
       "      <td>5</td>\n",
       "      <td>4030.612245</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>938</th>\n",
       "      <td>other</td>\n",
       "      <td>4 BHK</td>\n",
       "      <td>2000</td>\n",
       "      <td>4</td>\n",
       "      <td>Trivandrum</td>\n",
       "      <td>7800000.0</td>\n",
       "      <td>4</td>\n",
       "      <td>3900.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>939</th>\n",
       "      <td>other</td>\n",
       "      <td>4 BHK</td>\n",
       "      <td>3700</td>\n",
       "      <td>4</td>\n",
       "      <td>Trivandrum</td>\n",
       "      <td>30000000.0</td>\n",
       "      <td>4</td>\n",
       "      <td>8108.108108</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>941</th>\n",
       "      <td>other</td>\n",
       "      <td>4 BHK</td>\n",
       "      <td>2500</td>\n",
       "      <td>5</td>\n",
       "      <td>Trivandrum</td>\n",
       "      <td>11900000.0</td>\n",
       "      <td>4</td>\n",
       "      <td>4760.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>943</th>\n",
       "      <td>other</td>\n",
       "      <td>4 BHK</td>\n",
       "      <td>3300</td>\n",
       "      <td>5</td>\n",
       "      <td>Trivandrum</td>\n",
       "      <td>24500000.0</td>\n",
       "      <td>4</td>\n",
       "      <td>7424.242424</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>944</th>\n",
       "      <td>other</td>\n",
       "      <td>5 BHK</td>\n",
       "      <td>3795</td>\n",
       "      <td>5</td>\n",
       "      <td>Trivandrum</td>\n",
       "      <td>21000000.0</td>\n",
       "      <td>5</td>\n",
       "      <td>5533.596838</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>687 rows × 8 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "    location    size  total_sqft  bath    district       Price  bhk  \\\n",
       "0    Akkulam  2 BHK          950     2  Trivandrum   3150000.0    2   \n",
       "1    Akkulam  3 BHK         1375     3  Trivandrum   6700000.0    3   \n",
       "3    Akkulam  4 BHK         1800     4  Trivandrum   7000000.0    4   \n",
       "4    Akkulam  4 BHK         1750     4  Trivandrum   6300000.0    4   \n",
       "5    Akkulam  5 BHK         1960     5  Trivandrum   7900000.0    5   \n",
       "..       ...     ...         ...   ...         ...         ...  ...   \n",
       "938    other  4 BHK         2000     4  Trivandrum   7800000.0    4   \n",
       "939    other  4 BHK         3700     4  Trivandrum  30000000.0    4   \n",
       "941    other  4 BHK         2500     5  Trivandrum  11900000.0    4   \n",
       "943    other  4 BHK         3300     5  Trivandrum  24500000.0    4   \n",
       "944    other  5 BHK         3795     5  Trivandrum  21000000.0    5   \n",
       "\n",
       "     price_per_sqft  \n",
       "0       3315.789474  \n",
       "1       4872.727273  \n",
       "3       3888.888889  \n",
       "4       3600.000000  \n",
       "5       4030.612245  \n",
       "..              ...  \n",
       "938     3900.000000  \n",
       "939     8108.108108  \n",
       "941     4760.000000  \n",
       "943     7424.242424  \n",
       "944     5533.596838  \n",
       "\n",
       "[687 rows x 8 columns]"
      ]
     },
     "execution_count": 210,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 211,
   "id": "66f51786",
   "metadata": {},
   "outputs": [],
   "source": [
    "df.drop(columns=['size','price_per_sqft'],inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 212,
   "id": "8e9a2f5e",
   "metadata": {},
   "outputs": [],
   "source": [
    "## Cleaned data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 213,
   "id": "47a1a138",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>location</th>\n",
       "      <th>total_sqft</th>\n",
       "      <th>bath</th>\n",
       "      <th>district</th>\n",
       "      <th>Price</th>\n",
       "      <th>bhk</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Akkulam</td>\n",
       "      <td>950</td>\n",
       "      <td>2</td>\n",
       "      <td>Trivandrum</td>\n",
       "      <td>3150000.0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Akkulam</td>\n",
       "      <td>1375</td>\n",
       "      <td>3</td>\n",
       "      <td>Trivandrum</td>\n",
       "      <td>6700000.0</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Akkulam</td>\n",
       "      <td>1800</td>\n",
       "      <td>4</td>\n",
       "      <td>Trivandrum</td>\n",
       "      <td>7000000.0</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Akkulam</td>\n",
       "      <td>1750</td>\n",
       "      <td>4</td>\n",
       "      <td>Trivandrum</td>\n",
       "      <td>6300000.0</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Akkulam</td>\n",
       "      <td>1960</td>\n",
       "      <td>5</td>\n",
       "      <td>Trivandrum</td>\n",
       "      <td>7900000.0</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  location  total_sqft  bath    district      Price  bhk\n",
       "0  Akkulam         950     2  Trivandrum  3150000.0    2\n",
       "1  Akkulam        1375     3  Trivandrum  6700000.0    3\n",
       "3  Akkulam        1800     4  Trivandrum  7000000.0    4\n",
       "4  Akkulam        1750     4  Trivandrum  6300000.0    4\n",
       "5  Akkulam        1960     5  Trivandrum  7900000.0    5"
      ]
     },
     "execution_count": 213,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "id": "36bf3135",
   "metadata": {},
   "outputs": [],
   "source": [
    "df.to_csv(\"Cleaned_data_house.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 214,
   "id": "112556ee",
   "metadata": {},
   "outputs": [],
   "source": [
    "#model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 215,
   "id": "be58200e",
   "metadata": {},
   "outputs": [],
   "source": [
    "X=df.drop(columns=['Price'])\n",
    "y=df['Price']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 216,
   "id": "814f080b",
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.25,random_state=93)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 217,
   "id": "61dcb8c6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(515, 5)\n",
      "(172, 5)\n"
     ]
    }
   ],
   "source": [
    "print (X_train.shape)\n",
    "print (X_test.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e67a3b6b",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 218,
   "id": "a39647be",
   "metadata": {},
   "outputs": [],
   "source": [
    "column_trans=make_column_transformer((OneHotEncoder(sparse=False),['location','district']),remainder='passthrough')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 219,
   "id": "8130c619",
   "metadata": {},
   "outputs": [],
   "source": [
    "scaler=StandardScaler()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 220,
   "id": "8d5c5dee",
   "metadata": {},
   "outputs": [],
   "source": [
    "lr=LinearRegression()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 221,
   "id": "9518503a",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.ensemble import RandomForestRegressor\n",
    "rfr = RandomForestRegressor(n_estimators = 500, random_state = 0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 222,
   "id": "54f2b4a5",
   "metadata": {},
   "outputs": [],
   "source": [
    "pipe1=make_pipeline(column_trans,scaler,lr)\n",
    "pipe2=make_pipeline(column_trans,scaler,rfr)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 223,
   "id": "6b01e964",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Pipeline(steps=[('columntransformer',\n",
       "                 ColumnTransformer(remainder='passthrough',\n",
       "                                   transformers=[('onehotencoder',\n",
       "                                                  OneHotEncoder(sparse=False),\n",
       "                                                  ['location', 'district'])])),\n",
       "                ('standardscaler', StandardScaler()),\n",
       "                ('linearregression', LinearRegression())])"
      ]
     },
     "execution_count": 223,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pipe1.fit(X_train,y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 224,
   "id": "fdf7bb73",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Pipeline(steps=[('columntransformer',\n",
       "                 ColumnTransformer(remainder='passthrough',\n",
       "                                   transformers=[('onehotencoder',\n",
       "                                                  OneHotEncoder(sparse=False),\n",
       "                                                  ['location', 'district'])])),\n",
       "                ('standardscaler', StandardScaler()),\n",
       "                ('randomforestregressor',\n",
       "                 RandomForestRegressor(n_estimators=500, random_state=0))])"
      ]
     },
     "execution_count": 224,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pipe2.fit(X_train,y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 225,
   "id": "59c693f2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 9.29248270e+06,  3.21281947e+07,  6.89056270e+06,  1.42834587e+07,\n",
       "        2.57535387e+07,  2.14278670e+06,  1.52211867e+07,  1.57592987e+07,\n",
       "        8.84627470e+06,  1.08479387e+07,  1.08694427e+07,  2.76179867e+07,\n",
       "        2.10625947e+07,  5.08640270e+06,  1.48214427e+07,  1.00670107e+07,\n",
       "        1.12077467e+07,  2.52694427e+07,  6.55149070e+06,  4.50696376e+02,\n",
       "        1.00668827e+07,  2.74907547e+07,  1.23237787e+07,  1.92316827e+07,\n",
       "        1.97206427e+07,  1.08479387e+07,  4.47917070e+06,  1.42834587e+07,\n",
       "        2.27734427e+07,  3.96461070e+06,  6.55609870e+06,  8.84627470e+06,\n",
       "        2.27186587e+07,  6.26221070e+06,  2.86929307e+07,  6.97773070e+06,\n",
       "        2.90469787e+07,  7.66867470e+06,  2.52537870e+06,  1.15396507e+07,\n",
       "        5.86899470e+06,  8.60896270e+06,  5.90662670e+06,  2.17450907e+07,\n",
       "        1.27382427e+07,  2.74683547e+07,  6.92883470e+06,  1.52631707e+07,\n",
       "        5.38950670e+06,  1.13438107e+07,  2.46952347e+07,  3.09984270e+06,\n",
       "        7.91443470e+06,  2.87686670e+06,  2.86929307e+07,  1.98340507e+07,\n",
       "        1.12846747e+07,  2.65974427e+07,  1.92316827e+07,  3.49920270e+06,\n",
       "        2.59995547e+07,  8.48966670e+06,  8.89440270e+06,  2.01624987e+07,\n",
       "        1.08056987e+07,  1.42834587e+07,  6.84896270e+06,  1.61632667e+07,\n",
       "        1.84851470e+06,  3.63358107e+07,  6.92883470e+06,  7.98381070e+06,\n",
       "        6.55609870e+06,  1.42038427e+07,  2.70212507e+07,  1.08694427e+07,\n",
       "        9.57702670e+06,  3.42393870e+06,  2.43523227e+07,  4.09593870e+06,\n",
       "        7.80717070e+06,  1.19725070e+06,  1.45038747e+07,  1.20383387e+07,\n",
       "        4.59219470e+06,  1.43152027e+07, -7.96861304e+05,  6.43270670e+06,\n",
       "        6.92883470e+06,  2.96723470e+06,  3.49920270e+06,  1.66789787e+07,\n",
       "        2.22768027e+07,  6.84653070e+06,  1.08479387e+07,  5.37248270e+06,\n",
       "        1.27693467e+07,  6.06637070e+06,  1.27693467e+07,  1.63130267e+07,\n",
       "        1.18279067e+07,  2.76179867e+07,  3.30690696e+05,  9.98765070e+06,\n",
       "        5.86310670e+06,  1.23237787e+07,  8.80864270e+06,  8.00505870e+06,\n",
       "        1.52631707e+07,  1.16281870e+06,  2.52537870e+06,  1.98081947e+07,\n",
       "        1.03640987e+07, -3.87173036e+04,  7.52531470e+06,  1.49139470e+06,\n",
       "        2.96723470e+06,  1.00883867e+07,  7.81305870e+06,  2.71338907e+07,\n",
       "       -2.23333036e+04,  4.88928270e+06,  3.18821787e+07,  8.72851470e+06,\n",
       "        8.40441870e+06,  1.73843470e+06,  2.46952347e+07,  9.46937870e+06,\n",
       "       -5.98077304e+05,  2.61075867e+07,  1.53337870e+06,  1.63310747e+07,\n",
       "        5.86899470e+06,  8.84627470e+06,  3.54118670e+06,  6.05561870e+06,\n",
       "        3.94694670e+06,  9.89613070e+06,  4.50696376e+02, -4.69100530e+06,\n",
       "        9.00115470e+06,  1.35139227e+07,  1.98340507e+07,  6.97773070e+06,\n",
       "        1.43152027e+07,  1.37453467e+07,  2.99646107e+07,  3.11484827e+07,\n",
       "        9.10227470e+06,  8.26809870e+06,  8.84627470e+06,  7.33280270e+06,\n",
       "        2.02950670e+06,  3.60595470e+06,  2.45778587e+07,  9.88025870e+06,\n",
       "        6.06189070e+06,  2.61075867e+07,  3.63358107e+07,  3.92467470e+06,\n",
       "        2.96723470e+06,  1.65280270e+06,  9.92659470e+06,  1.55785627e+07,\n",
       "       -2.38598130e+06,  1.23237787e+07,  7.64486670e+06,  1.49139470e+06,\n",
       "        7.04608270e+06,  3.11597070e+06,  6.36826964e+04,  2.51949070e+06])"
      ]
     },
     "execution_count": 225,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_pred_lr=pipe1.predict(X_test)\n",
    "y_pred_lr"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 226,
   "id": "1b6ab0db",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 8011918.57142857, 34259600.        ,  5263516.66666667,\n",
       "       15188976.21933621, 22960987.3015873 ,  7555550.64935065,\n",
       "       14213527.61904762, 24519830.        , 10303336.66666667,\n",
       "       10738023.01587301,  9977890.47619048, 23461966.66666666,\n",
       "       23045000.        ,  7406899.60317461, 14951042.38095238,\n",
       "       10381743.80952381,  5189633.33333333, 27338300.        ,\n",
       "        8370198.57142857,  7187586.66666667,  5672000.        ,\n",
       "       27924400.        , 13855703.57142857, 15093649.04761904,\n",
       "       19373157.61904762, 10738023.01587301,  6561711.11111111,\n",
       "       15188976.21933621, 24231600.        ,  6748666.66666667,\n",
       "        7596600.        , 10303336.66666667, 22398300.        ,\n",
       "        6377515.        , 27952744.15584416,  7982800.        ,\n",
       "       27034000.        , 11042746.66666667,  6289462.14285714,\n",
       "       10146746.64502163,  7121992.96425797,  9065503.33333333,\n",
       "        7377981.42857143, 26969000.        , 13317085.71428571,\n",
       "       23934600.        ,  7650575.07936508, 13011629.2063492 ,\n",
       "        6624150.        ,  9313731.11111111, 25943200.        ,\n",
       "        7722315.        ,  7482836.66666667,  5237733.33333333,\n",
       "       27952744.15584416, 22882500.        ,  7895754.76190476,\n",
       "       27892000.        , 15093649.04761904,  8721195.71428571,\n",
       "       25822200.        ,  8340135.71428571,  8314381.42857143,\n",
       "       16431124.28571429,  9104822.14285715, 15188976.21933621,\n",
       "        7935247.73448773, 14572933.33333333,  4857898.57142857,\n",
       "       31872000.        ,  7650575.07936508,  7447849.52380952,\n",
       "        7596600.        , 13776952.38095238, 27699128.57142857,\n",
       "        9977890.47619048, 11135880.79365079,  6811043.80952381,\n",
       "       22450900.        ,  7634730.95238095,  7217002.6984127 ,\n",
       "        5606495.23809524, 13393593.33333333, 11167304.76190476,\n",
       "        8148216.66666667, 15082475.95238095,  6661733.33333333,\n",
       "        7655939.52380953,  7650575.07936508,  6283675.47619048,\n",
       "        8721195.71428571, 13334222.38095238, 21901000.        ,\n",
       "        5417543.35497835, 10738023.01587301,  5942666.66666667,\n",
       "       13262985.71428572,  6936110.71428571, 13262985.71428572,\n",
       "       14905041.9047619 , 12619850.        , 23461966.66666666,\n",
       "        3014233.33333333, 13310119.52380952,  5630081.66666667,\n",
       "       13855703.57142857,  8301671.42857143,  7050097.61904762,\n",
       "       13011629.2063492 ,  7866010.23809524,  6289462.14285714,\n",
       "       21761900.        ,  9659380.34188034,  6886876.66666667,\n",
       "        8320866.66666667,  8428233.33333333,  6283675.47619048,\n",
       "        8002370.        ,  7993100.        , 24394166.66666666,\n",
       "        3987326.90476191,  7260451.06782107, 34810100.        ,\n",
       "        8879453.33333333,  7768140.        ,  3895256.42857143,\n",
       "       25943200.        ,  8962762.77777778,  4878476.73881674,\n",
       "       26703300.        ,  4284768.0952381 , 14665426.66666667,\n",
       "        7121992.96425797, 10303336.66666667, 10377844.84126984,\n",
       "        7242973.80952381,  5915104.76190476,  9617000.        ,\n",
       "        7187586.66666667,  2538746.66666667, 10110126.19047619,\n",
       "       12653563.33333333, 22882500.        ,  7982800.        ,\n",
       "       15082475.95238095, 14909316.66666667, 32992533.33333334,\n",
       "       32888200.        ,  9861032.13564213,  4370398.33333333,\n",
       "       10303336.66666667,  7575035.31746032,  5500241.9047619 ,\n",
       "        7552926.19047619, 27247000.        , 11160158.04029305,\n",
       "        9220815.71428571, 26703300.        , 31872000.        ,\n",
       "        6492815.78643579,  6283675.47619048,  7575820.09379509,\n",
       "       10200757.14285714, 12970405.71428571,  4106900.        ,\n",
       "       13855703.57142857,  6876078.57142857,  8428233.33333333,\n",
       "        7689106.66666667,  7352405.06493506,  3756613.33333333,\n",
       "        5425441.9047619 ])"
      ]
     },
     "execution_count": 226,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_pred_rfr=pipe2.predict(X_test)\n",
    "y_pred_rfr"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 227,
   "id": "6cabf664",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "MAE: 2995704.7672482585\n",
      "MSE: 13686165428146.055\n",
      "RMSE: 3699481.7783232904\n",
      "R2: 0.7951320632992682\n"
     ]
    }
   ],
   "source": [
    "from sklearn.metrics import mean_absolute_error, mean_squared_error\n",
    "mae_lr = mean_absolute_error(y_test, y_pred_lr)\n",
    "mse_lr = mean_squared_error(y_test, y_pred_lr)\n",
    "rmse_lr = np.sqrt(mse_lr)\n",
    "r2_lr = r2_score(y_test, y_pred_lr)\n",
    "\n",
    "print(\"MAE:\", mae_lr)\n",
    "print(\"MSE:\", mse_lr)\n",
    "print(\"RMSE:\", rmse_lr)\n",
    "print(\"R2:\",r2_lr)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 228,
   "id": "a1add164",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "MAE: 1643355.8028889715\n",
      "MSE: 6006877585036.224\n",
      "RMSE: 2450893.2218756946\n",
      "R2: 0.9100831695100338\n"
     ]
    }
   ],
   "source": [
    "from sklearn.metrics import mean_absolute_error, mean_squared_error\n",
    "mae_rfr = mean_absolute_error(y_test, y_pred_rfr)\n",
    "mse_rfr = mean_squared_error(y_test, y_pred_rfr)\n",
    "rmse_rfr = np.sqrt(mse_rfr)\n",
    "r2_rfr = r2_score(y_test, y_pred_rfr)\n",
    "\n",
    "print(\"MAE:\", mae_rfr)\n",
    "print(\"MSE:\", mse_rfr)\n",
    "print(\"RMSE:\", rmse_rfr)\n",
    "print(\"R2:\",r2_rfr)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 229,
   "id": "f87377ba",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Report for Linear Regression\n",
      "\n",
      "Metrics                                     Value\n",
      "------------------------------  -----------------\n",
      "Mean Squared Error (MSE)        13686165428146.05\n",
      "Mean Absolute Error (MAE)              2995704.77\n",
      "R-squared (R2)                               0.80\n",
      "Root Mean Squared Error (RMSE)         3699481.78\n"
     ]
    }
   ],
   "source": [
    "from tabulate import tabulate\n",
    "table = [[\"Metrics\", \"Value\"],\n",
    "         [\"Mean Squared Error (MSE)\", mse_lr],\n",
    "         [\"Mean Absolute Error (MAE)\", mae_lr],\n",
    "         [\"R-squared (R2)\", r2_lr],\n",
    "         [\"Root Mean Squared Error (RMSE)\", rmse_lr]]\n",
    "\n",
    "# print table\n",
    "print(\"Report for Linear Regression\")\n",
    "print()\n",
    "print(tabulate(table, headers='firstrow', floatfmt='.2f'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 230,
   "id": "b5a6e988",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Report for Random Forest Regression\n",
      "\n",
      "Metrics                                    Value\n",
      "------------------------------  ----------------\n",
      "Mean Squared Error (MSE)        6006877585036.22\n",
      "Mean Absolute Error (MAE)             1643355.80\n",
      "R-squared (R2)                              0.91\n",
      "Root Mean Squared Error (RMSE)        2450893.22\n"
     ]
    }
   ],
   "source": [
    "from tabulate import tabulate\n",
    "table = [[\"Metrics\", \"Value\"],\n",
    "         [\"Mean Squared Error (MSE)\", mse_rfr],\n",
    "         [\"Mean Absolute Error (MAE)\", mae_rfr],\n",
    "         [\"R-squared (R2)\", r2_rfr],\n",
    "         [\"Root Mean Squared Error (RMSE)\", rmse_rfr]]\n",
    "\n",
    "# print table\n",
    "print(\"Report for Random Forest Regression\")\n",
    "print()\n",
    "print(tabulate(table, headers='firstrow', floatfmt='.2f'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 231,
   "id": "4aac5987",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy for Linear regression: 79.51320632992682 %\n",
      "Accuracy for RandomForest regression 91.00831695100338 %\n"
     ]
    }
   ],
   "source": [
    "new_score_lr=r2_lr*100\n",
    "new_score_rfr=r2_rfr*100\n",
    "\n",
    "print(\"Accuracy for Linear regression:\",new_score_lr,\"%\")\n",
    "print(\"Accuracy for RandomForest regression\",new_score_rfr,\"%\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 232,
   "id": "776b0ee8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy\n",
      "\n",
      "Metrics                                  Value\n",
      "-------------------------------------  -------  --\n",
      "Accuracy for Linear Regression           79.51  %\n",
      "Accuracy for Random forest Regression    91.01  %\n"
     ]
    }
   ],
   "source": [
    "table = [[\"Metrics\", \"Value\",\"\"],\n",
    "         [\"Accuracy for Linear Regression\", new_score_lr,\"%\"],\n",
    "         [\"Accuracy for Random forest Regression\", new_score_rfr,\"%\"]]\n",
    "print(\"Accuracy\")\n",
    "print()\n",
    "print(tabulate(table, headers='firstrow', floatfmt='.2f'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 233,
   "id": "e0bed820",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'scores=[]\\nfor i in range(100):\\n    X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.25,random_state=i)\\n    lr=LinearRegression()\\n    pipe=make_pipeline(column_trans,scaler,lr)\\n    pipe.fit(X_train,y_train)\\n    y_pred=pipe.predict(X_test)\\n    scores.append(r2_score(y_test,y_pred))'"
      ]
     },
     "execution_count": 233,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "'''scores=[]\n",
    "for i in range(100):\n",
    "    X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.25,random_state=i)\n",
    "    lr=LinearRegression()\n",
    "    pipe=make_pipeline(column_trans,scaler,lr)\n",
    "    pipe.fit(X_train,y_train)\n",
    "    y_pred=pipe.predict(X_test)\n",
    "    scores.append(r2_score(y_test,y_pred))'''"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 234,
   "id": "ef72e2a9",
   "metadata": {},
   "outputs": [],
   "source": [
    "#np.argmax(scores)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 235,
   "id": "e23b1b49",
   "metadata": {},
   "outputs": [],
   "source": [
    "#scores[np.argmax(scores)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 158,
   "id": "0458988e",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pickle\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 236,
   "id": "732465fa",
   "metadata": {},
   "outputs": [],
   "source": [
    "pickle.dump (pipe2,open('model.pkl','wb'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 237,
   "id": "d647a4fd",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([8370198.57142857])"
      ]
     },
     "execution_count": 237,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pipe2.predict(pd.DataFrame([['Kowdiar',1850,4,4,'Trivandrum']],columns=['location','total_sqft','bhk','bath','district']))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c4e37d57",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
